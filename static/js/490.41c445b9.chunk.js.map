{"version":3,"file":"static/js/490.41c445b9.chunk.js","mappings":"mMAsCA,UAlCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAWC,OAAOJ,IAAUK,MAAK,SAAAC,GAC/B,IAAMC,EAAqBD,EAASE,KAAI,kBAA8B,CACpEC,GADsC,EAAGA,GAEzCC,QAFsC,EAAOA,QAG7CC,OAHsC,EAAgBA,OAAhB,IAKxCZ,EAAWQ,EACZ,GACF,GAAE,CAACP,IAECF,GAKH,4BACIA,EAAQc,SAAU,sEACpB,wBACGd,EAAQU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,OAAhB,OACX,2BACE,qCAAaA,MACb,uBAAID,MAFGD,EADE,SAPV,IAgBV,C,6MCjCKI,EAAW,+BAEJC,EAAgB,mCAAG,6FACxBC,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,mCACTC,KAAM,IAHsB,kBAOLC,EAAAA,EAAAA,IAAA,UAClBN,EADkB,gCACcE,IART,cAOtBT,EAPsB,yBAWrBA,EAASc,KAAKC,SAXO,gCAa5BC,EAAAA,GAAAA,MAAY,2CAA4C,CACtDC,SAAU,YACVC,UAAW,IACXC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,MAAO,YAnBmB,yDAAH,qDAwBhBC,EAAgB,mCAAG,WAAMC,GAAN,gFACxBf,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,mCACTa,MAAM,GAAD,OAAKA,KAHkB,kBAOLX,EAAAA,EAAAA,IAAA,UAClBN,EADkB,yBACOE,IARF,UAWS,KAJ/BT,EAPsB,QAWfc,KAAKC,QAAQT,OAXE,uBAY1BU,EAAAA,GAAAA,KAAW,6BAZe,mDAgBrBhB,EAASc,KAAKC,SAhBO,kCAkB5BU,QAAQC,IAAI,KAAMC,SAlBU,0DAAH,sDAsBhBC,EAAe,mCAAG,WAAMlC,GAAN,gFACvBe,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,qCAFkB,kBAMJE,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAb,EADA,YACWe,IAPP,cAMrBT,EANqB,yBAUpBA,EAASc,MAVW,gCAY3BE,EAAAA,GAAAA,MAAY,2CAA4C,CACtDC,SAAU,YACVC,UAAW,IACXC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,MAAO,YAlBkB,yDAAH,sDAuBfO,EAAY,mCAAG,WAAMnC,GAAN,gFACpBe,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,qCAFe,kBAMDE,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAb,EADA,oBACmBe,IAPlB,cAMlBT,EANkB,yBAUjBA,EAASc,KAAKgB,MAVG,gCAYxBd,EAAAA,GAAAA,MAAY,2CAA4C,CACtDC,SAAU,YACVC,UAAW,IACXC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,MAAO,YAlBe,yDAAH,sDAuBZzB,EAAU,mCAAG,WAAMH,GAAN,gFAClBe,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,qCAFa,kBAMCE,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAb,EADA,oBACmBe,IAPpB,cAMhBT,EANgB,yBAUfA,EAASc,KAAKC,SAVC,gCAYtBC,EAAAA,GAAAA,MAAY,2CAA4C,CACtDC,SAAU,YACVC,UAAW,IACXC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,MAAO,YAlBa,yDAAH,qD","sources":["pages/Movies/MovieDetails/Reviews/Reviews.jsx","service-api/service-api.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from '../../../../service-api/service-api';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getReviews(Number(movieId)).then(response => {\n      const fetchedReviewsData = response.map(({ id, content, author }) => ({\n        id,\n        content,\n        author,\n      }));\n      setReviews(fetchedReviewsData);\n    });\n  }, [movieId]);\n\n  if (!reviews) {\n    return null;\n  }\n\n  return (\n    <div>\n      {!reviews.length && <p>We don't have any reviews for this movie.</p>}\n      <ul>\n        {reviews.map(({ id, content, author }) => (\n          <li key={id}>\n            <h3>Author: {author}</h3>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import { toast } from 'react-toastify';\nimport axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const searchParams = new URLSearchParams({\n    api_key: 'f473c515ad1de0efd576d9ff7cafa2d6',\n    page: 1,\n  });\n\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/week?${searchParams}`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    toast.error('Something went wrong! An error occurred!', {\n      position: 'top-right',\n      autoClose: 3000,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      theme: 'colored',\n    });\n  }\n};\n\nexport const getSearchedFilms = async query => {\n  const searchParams = new URLSearchParams({\n    api_key: 'f473c515ad1de0efd576d9ff7cafa2d6',\n    query: `${query}`,\n  });\n\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?${searchParams}`\n    );\n\n    if (response.data.results.length === 0) {\n      toast.warn('Please enter right query!');\n      return;\n    }\n\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  const searchParams = new URLSearchParams({\n    api_key: 'f473c515ad1de0efd576d9ff7cafa2d6',\n  });\n\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}?${searchParams}`\n    );\n\n    return response.data;\n  } catch (error) {\n    toast.error('Something went wrong! An error occurred!', {\n      position: 'top-right',\n      autoClose: 3000,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      theme: 'colored',\n    });\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  const searchParams = new URLSearchParams({\n    api_key: 'f473c515ad1de0efd576d9ff7cafa2d6',\n  });\n\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?${searchParams}`\n    );\n\n    return response.data.cast;\n  } catch (error) {\n    toast.error('Something went wrong! An error occurred!', {\n      position: 'top-right',\n      autoClose: 3000,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      theme: 'colored',\n    });\n  }\n};\n\nexport const getReviews = async movieId => {\n  const searchParams = new URLSearchParams({\n    api_key: 'f473c515ad1de0efd576d9ff7cafa2d6',\n  });\n\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?${searchParams}`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    toast.error('Something went wrong! An error occurred!', {\n      position: 'top-right',\n      autoClose: 3000,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      theme: 'colored',\n    });\n  }\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","getReviews","Number","then","response","fetchedReviewsData","map","id","content","author","length","BASE_URL","getTrendingFilms","searchParams","URLSearchParams","api_key","page","axios","data","results","toast","position","autoClose","closeOnClick","pauseOnHover","draggable","theme","getSearchedFilms","query","console","log","message","getMovieDetails","getMovieCast","cast"],"sourceRoot":""}